// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.SlideshowPlayer = (function(_super) {
    __extends(SlideshowPlayer, _super);

    function SlideshowPlayer(options) {
      this.keydownHandler = __bind(this.keydownHandler, this);
      this.togglePlayPause = __bind(this.togglePlayPause, this);
      this.timeupdateHandler = __bind(this.timeupdateHandler, this);
      SlideshowPlayer.__super__.constructor.call(this, options);
      this.createPageTimestamps();
    }

    SlideshowPlayer.prototype.initializeElements = function() {
      var _this = this;
      SlideshowPlayer.__super__.initializeElements.call(this);
      this.annotationLayer = $('<div class="annotationLayer"></div>');
      $('#slideshow').append(this.annotationLayer);
      this.player = $('#player');
      return this.player.jPlayer({
        ready: function() {
          return _this.player.jPlayer("setMedia", {
            oga: _this.options.audioBaseName + ".ogg",
            mp3: _this.options.audioBaseName + ".mp3"
          });
        },
        swfPath: this.options.swfPath,
        preload: "auto",
        wmode: "window",
        supplied: "oga,mp3",
        keyEnabled: true
      });
    };

    SlideshowPlayer.prototype.attachGuiHandlers = function() {
      var _this = this;
      SlideshowPlayer.__super__.attachGuiHandlers.call(this);
      this.player.bind($.jPlayer.event.timeupdate, this.timeupdateHandler);
      this.player.bind($.jPlayer.event.play, function() {
        return _this.isPlaying = true;
      });
      this.player.bind($.jPlayer.event.pause, function() {
        return _this.isPlaying = false;
      });
      return this.canvas.click(this.togglePlayPause);
    };

    SlideshowPlayer.prototype.createPageTimestamps = function() {
      var old, value, _i, _len, _ref, _results;
      this.pageTimestamps = [];
      _ref = this.options.timestampPages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        old = this.pageTimestamps[value[1]];
        if ((old == null) || old > value[0]) {
          _results.push(this.pageTimestamps[value[1]] = value[0]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SlideshowPlayer.prototype.timeupdateHandler = function(event) {
      var current, duration, nextPage, nextPoint, timestamp, value, _i, _j, _len, _len1, _ref, _ref1;
      current = event.jPlayer.status.currentTime;
      duration = event.jPlayer.status.duration;
      $("#current_time").text($.jPlayer.convertTime(current));
      $("#duration").text($.jPlayer.convertTime(duration));
      nextPage = -1;
      _ref = this.options.timestampPages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        timestamp = value[0];
        if (timestamp > current) {
          continue;
        }
        nextPage = value[1];
      }
      if (nextPage > -1 && nextPage !== this.currentPage) {
        this.currentPage = nextPage;
        this.renderCurrentPage();
      }
      _ref1 = this.options.timestampPointers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        value = _ref1[_j];
        timestamp = value[0];
        if (timestamp > current) {
          continue;
        }
        nextPoint = value;
      }
      if (nextPoint && Math.abs(current - nextPoint[0]) < .5) {
        return this.showPointer(nextPoint[1], nextPoint[2]);
      }
    };

    SlideshowPlayer.prototype.gotoPage = function(pageNum) {
      var mode, target;
      mode = this.isPlaying ? "play" : "pause";
      this.player.jPlayer('pause');
      SlideshowPlayer.__super__.gotoPage.call(this, pageNum);
      target = this.pageTimestamps[this.currentPage];
      if (target != null) {
        return this.player.jPlayer(mode, target);
      }
    };

    SlideshowPlayer.prototype.togglePlayPause = function() {
      if (this.isPlaying) {
        this.player.jPlayer("pause");
      } else {
        this.player.jPlayer("play");
      }
      return false;
    };

    SlideshowPlayer.prototype.keydownHandler = function(event) {
      SlideshowPlayer.__super__.keydownHandler.call(this, event);
      switch (event.which) {
        case 32:
          this.togglePlayPause();
          return event.preventDefault();
      }
    };

    SlideshowPlayer.prototype.renderPage = function(page) {
      var viewport;
      viewport = SlideshowPlayer.__super__.renderPage.call(this, page);
      return this.setupAnnotations(page, viewport);
    };

    SlideshowPlayer.prototype.setupAnnotations = function(page, viewport) {
      var bindExternalLink, bindInternalLink, bindNamedAction, canvasOffset,
        _this = this;
      bindInternalLink = function(link, dest) {
        link.attr('href', '#');
        return link.click(function() {
          var destRef, destination, pageNumber;
          destination = _this.destinations[dest];
          if (destination instanceof Array) {
            destRef = destination[0];
            pageNumber = destRef instanceof Object ? _this.pagesRefMap[destRef.num + ' ' + destRef.gen + ' R'] : destRef + 1;
            if (pageNumber <= _this.numPages) {
              _this.gotoPage(pageNumber);
            }
          }
          return false;
        });
      };
      bindExternalLink = function(link, url) {
        return link.click(function() {
          _this.player.jPlayer("pause");
          open(url);
          return false;
        });
      };
      bindNamedAction = function(link, action) {
        link.attr('href', '#');
        return link.click(function() {
          switch (action) {
            case 'NextPage':
              nextPage();
              break;
            case 'PrevPage':
              prevPage();
              break;
            case 'LastPage':
              if (currentPage !== _this.numPages) {
                gotoPage(_this.numPages);
              }
              break;
            case 'FirstPage':
              if (currentPage !== 1) {
                gotoPage(1);
              }
          }
          return false;
        });
      };
      this.annotationLayer.empty();
      canvasOffset = this.canvas.offset();
      return page.getAnnotations().then(function(annotationsData) {
        var annotation, data, element, rect, transform, transformOriginStr, transformStr, view, _i, _len, _results;
        viewport = viewport.clone({
          dontFlip: true
        });
        _results = [];
        for (_i = 0, _len = annotationsData.length; _i < _len; _i++) {
          data = annotationsData[_i];
          annotation = PDFJS.Annotation.fromData(data);
          if (!(annotation != null ? annotation.hasHtml() : void 0)) {
            continue;
          }
          element = annotation.getHtmlElement(page.commonObjs);
          data = annotation.getData();
          rect = data.rect;
          view = page.view;
          rect = PDFJS.Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);
          $(element).css({
            left: (canvasOffset.left + rect[0]) + 'px',
            top: (canvasOffset.top + rect[1]) + 'px',
            position: 'absolute'
          });
          transform = viewport.transform;
          transformStr = 'matrix(' + transform.join(',') + ')';
          CustomStyle.setProp('transform', element, transformStr);
          transformOriginStr = -rect[0] + 'px ' + -rect[1] + 'px';
          CustomStyle.setProp('transformOrigin', element, transformOriginStr);
          if (data.subtype === 'Link') {
            if (data.url != null) {
              bindExternalLink($(element), data.url);
            } else if (data.action != null) {
              bindNamedAction($(element), data.action);
            } else if (data.dest != null) {
              bindInternalLink($(element), data.dest);
            }
          }
          _results.push(_this.annotationLayer.append(element));
        }
        return _results;
      });
    };

    return SlideshowPlayer;

  })(Slideshow);

}).call(this);
