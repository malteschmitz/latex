// Generated by CoffeeScript 1.6.3
/*
  Slideshow 0.1
  (c) Malte Schmitz, December 2013
  MIT Licence
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Slideshow = (function() {
    function Slideshow(options) {
      var _ref, _ref1;
      this.options = options;
      this.hideCursor = __bind(this.hideCursor, this);
      this.showCursor = __bind(this.showCursor, this);
      this.fullScreenChangeHandler = __bind(this.fullScreenChangeHandler, this);
      this.toggleFullScreen = __bind(this.toggleFullScreen, this);
      this.zoomIn = __bind(this.zoomIn, this);
      this.zoomOut = __bind(this.zoomOut, this);
      this.zoomDefault = __bind(this.zoomDefault, this);
      this.nextPage = __bind(this.nextPage, this);
      this.prevPage = __bind(this.prevPage, this);
      this.renderCurrentPage = __bind(this.renderCurrentPage, this);
      this.renderPage = __bind(this.renderPage, this);
      this.keydownHandler = __bind(this.keydownHandler, this);
      this.options.pleaseWaitString = (_ref = this.options.pleaseWaitString) != null ? _ref : 'Please wait!';
      this.options.loadingString = (_ref1 = this.options.loadingString) != null ? _ref1 : 'Loading the presentation...';
      if (this.options.workerSrc != null) {
        PDFJS.workerSrc = this.options.workerSrc;
      }
      this.zoom = 2;
      this.currentPage = 1;
      this.initializeElements();
      this.attachGuiHandlers();
      this.loadPresentation().then(this.renderCurrentPage);
    }

    Slideshow.prototype.initializeElements = function() {
      this.canvas = $('<canvas></canvas>');
      this.context = this.canvas[0].getContext('2d');
      $('#slideshow').append(this.canvas);
      this.canvas[0].height = 544;
      this.canvas[0].width = 725;
      this.context.font = "24pt \"Helvetica Neue\",Helvetica,Arial,sans-serif";
      this.context.fillText(this.options.pleaseWaitString, 10, 50);
      this.context.font = "16pt \"Helvetica Neue\",Helvetica,Arial,sans-serif";
      this.context.fillText(this.options.loadingString, 10, 100);
      this.pointer = $('<div></div>');
      this.pointer.css({
        backgroundColor: "#FF0000",
        position: "absolute"
      });
      this.pointer.hide();
      $("#slideshow").append(this.pointer);
      return this.player = $('#player');
    };

    Slideshow.prototype.attachGuiHandlers = function() {
      $("#prev").click(this.prevPage);
      $("#next").click(this.nextPage);
      $("#zoom-default").click(this.zoomDefault);
      $("#zoom-out").click(this.zoomOut);
      $("#zoom-in").click(this.zoomIn);
      $(document).keydown(this.keydownHandler);
      $('#slideshow').mousemove(this.hideCursor);
      $("#fullscreen").click(this.toggleFullScreen);
      return $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', this.fullScreenChangeHandler);
    };

    Slideshow.prototype.keydownHandler = function(event) {
      switch (event.which) {
        case 189:
          this.zoomOut();
          return event.preventDefault();
        case 48:
          this.zoomDefault();
          return event.preventDefault();
        case 187:
          this.zoomIn();
          return event.preventDefault();
        case 37:
        case 33:
          this.prevPage();
          return event.preventDefault();
        case 39:
        case 34:
          this.nextPage();
          return event.preventDefault();
        case 13:
          this.toggleFullScreen();
          return event.preventDefault();
      }
    };

    Slideshow.prototype.loadPresentation = function() {
      var _this = this;
      return PDFJS.getDocument(this.options.presentationUrl).then(function(pdfDoc) {
        var pageNum, pagePromise, _i, _ref, _results;
        pdfDoc.getDestinations().then(function(destinations) {
          return _this.destinations = destinations;
        });
        _this.numPages = pdfDoc.numPages;
        _this.pagePromises = [];
        _this.pagesRefMap = {};
        _results = [];
        for (pageNum = _i = 1, _ref = _this.numPages; 1 <= _ref ? _i <= _ref : _i >= _ref; pageNum = 1 <= _ref ? ++_i : --_i) {
          pagePromise = pdfDoc.getPage(pageNum);
          pagePromise.then(function(pdfPage) {
            var pageRef, refStr;
            pageRef = pdfPage.ref;
            refStr = pageRef.num + ' ' + pageRef.gen + ' R';
            return _this.pagesRefMap[refStr] = pdfPage.pageNumber;
          });
          _results.push(_this.pagePromises.push(pagePromise));
        }
        return _results;
      });
    };

    Slideshow.prototype.renderPage = function(page) {
      var viewport, z;
      if (this.isFullScreen) {
        viewport = page.getViewport(1);
        z = Math.min(screen.width / viewport.width, screen.height / viewport.height);
        viewport = page.getViewport(z);
      } else {
        viewport = page.getViewport(this.zoom);
      }
      this.canvas[0].height = viewport.height;
      this.canvas[0].width = viewport.width;
      page.render({
        canvasContext: this.context,
        viewport: viewport
      });
      return viewport;
    };

    Slideshow.prototype.renderCurrentPage = function() {
      var _ref, _ref1;
      if ((_ref = this.pagePromises) != null) {
        if ((_ref1 = _ref[this.currentPage - 1]) != null) {
          _ref1.then(this.renderPage);
        }
      }
      $('#page_num').text(this.currentPage);
      $('#page_count').text(this.numPages);
      return this.hidePointer();
    };

    Slideshow.prototype.gotoPage = function(pageNum) {
      if ((0 < pageNum && pageNum <= this.numPages)) {
        this.currentPage = pageNum;
        this.renderCurrentPage();
      }
      return false;
    };

    Slideshow.prototype.prevPage = function() {
      return this.gotoPage(this.currentPage - 1);
    };

    Slideshow.prototype.nextPage = function() {
      return this.gotoPage(this.currentPage + 1);
    };

    Slideshow.prototype.zoomDefault = function() {
      if (this.zoom !== 2) {
        this.zoom = 2;
        this.renderCurrentPage();
      }
      return false;
    };

    Slideshow.prototype.zoomOut = function() {
      if (this.zoom > .3) {
        this.zoom = this.zoom / 1.2;
        this.renderCurrentPage();
      }
      return false;
    };

    Slideshow.prototype.zoomIn = function() {
      if (this.zoom < 10) {
        this.zoom = this.zoom * 1.2;
        this.renderCurrentPage();
      }
      return false;
    };

    Slideshow.prototype.toggleFullScreen = function() {
      if (this.isFullScreen) {
        this.cancelFullScreen();
      } else {
        this.requestFullScreen();
      }
      return false;
    };

    Slideshow.prototype.cancelFullScreen = function() {
      var method;
      method = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || document.exitFullscreen;
      if (method) {
        return method.call(document);
      } else {
        return alert("Your browser does not support the full screen API.");
      }
    };

    Slideshow.prototype.requestFullScreen = function() {
      var element, method;
      element = document.getElementById('slideshow');
      method = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;
      if (method) {
        return method.call(element);
      } else {
        return alert("Your browser does not support the full screen API.");
      }
    };

    Slideshow.prototype.fullScreenChangeHandler = function() {
      this.isFullScreen = (document.fullScreenElement != null) || !!document.mozFullScreen || !!document.webkitIsFullScreen;
      if (this.isFullScreen) {
        $('#slideshow').addClass('fullscreen');
        this.hideCursor();
      } else {
        $('#slideshow').removeClass('fullscreen');
        this.showCursor();
      }
      return this.renderCurrentPage();
    };

    Slideshow.prototype.showCursor = function() {
      if (this.hideCursorTimeout != null) {
        clearTimeout(this.hideCursorTimeout);
      }
      delete this.hideCursorTimeout;
      return $('#slideshow').removeClass('no-cursor');
    };

    Slideshow.prototype.hideCursor = function() {
      var _this = this;
      if (this.cursorJustHidden) {
        delete this.cursorJustHidden;
        return;
      }
      this.showCursor();
      if (this.isFullScreen) {
        return this.hideCursorTimeout = setTimeout(function() {
          $('#slideshow').addClass('no-cursor');
          return _this.cursorJustHidden = true;
        }, 2000);
      }
    };

    Slideshow.prototype.hidePointer = function() {
      if (this.pointerTimeout != null) {
        clearTimeout(this.pointerTimeout);
        delete this.pointerTimeout;
        return this.pointer.hide();
      }
    };

    Slideshow.prototype.showPointer = function(x, y) {
      var offset, radius,
        _this = this;
      if ((this.currentAnimationTarget != null) && x === this.currentAnimationTarget[0] && y === this.currentAnimationTarget[1]) {
        return;
      }
      this.currentAnimationTarget = [x, y];
      offset = this.canvas.offset();
      radius = .03 * this.canvas.width();
      x = offset.left + this.canvas.width() * x;
      y = offset.top + this.canvas.height() * y;
      this.pointer.stop(true, true);
      if (this.pointerTimeout != null) {
        this.pointer.animate({
          top: y - radius,
          left: x - radius
        }, {
          duration: 300,
          done: function() {
            return delete _this.currentAnimationTarget;
          }
        });
        clearTimeout(this.pointerTimeout);
        delete this.pointerTimeout;
      } else {
        this.pointer.show();
        this.pointer.css({
          top: y,
          left: x,
          opacity: 0,
          borderRadius: 0,
          width: 0,
          height: 0
        });
        this.pointer.animate({
          top: y - radius,
          left: x - radius,
          width: 2 * radius,
          height: 2 * radius,
          borderRadius: radius,
          opacity: .64
        }, {
          duration: 600,
          done: function() {
            return delete _this.currentAnimationTarget;
          },
          easing: "easeOutElastic"
        });
      }
      return this.pointerTimeout = setTimeout(function() {
        _this.pointer.fadeOut({
          duration: 600
        });
        return delete _this.pointerTimeout;
      }, 4000);
    };

    return Slideshow;

  })();

}).call(this);
